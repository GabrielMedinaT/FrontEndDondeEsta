{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Documents\\\\ProyectoFinal\\\\FrontEndDondeEsta\\\\frontend\\\\src\\\\components\\\\Habitaciones.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport ConfirmacionModalHabitacion from \"./ConfirmacionModalHabitacion\";\nimport Addhab from \"./Addhab\";\nimport Modal from \"react-modal\";\nimport \"./Habitaciones.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Habitaciones = _ref => {\n  _s();\n  let {\n    darkmode\n  } = _ref;\n  const [habitaciones, setHabitaciones] = useState([]);\n  const [armarios, setArmarios] = useState([]);\n  const [isloadingarmarios, setIsLoadingArmarios] = useState(true);\n  const [isloadingHabitaciones, setIsLoadingHabitaciones] = useState(false);\n  const navigate = useNavigate();\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [modalAbierto, setModalAbierto] = useState(false);\n  const [habitacionAEliminar, setHabitacionAEliminar] = useState(\"\");\n  const [modalAbiertoHabitacion, setModalAbiertoHabitacion] = useState(false);\n  const [modalAbiertoArmarios, setModalAbiertoArmarios] = useState(false);\n  const [selectedHabitacionId, setSelectedHabitacionId] = useState(\"\");\n  const listaHabitaciones = document.querySelector(\".listaHabitaciones\");\n  const habitacione = document.querySelectorAll(\".habitacionConcreta\");\n  if (isloadingHabitaciones) {\n    listaHabitaciones.addEventListener(\"scroll\", resaltarElementoCentrado);\n  }\n  function resaltarElementoCentrado() {\n    const scrollPos = listaHabitaciones.scrollTop;\n    const containerHeight = listaHabitaciones.offsetHeight;\n    habitacione.forEach(habitacion => {\n      const rect = habitacion.getBoundingClientRect();\n      const elementTop = rect.top;\n      const elementHeight = rect.height;\n      const elementCenter = elementTop + elementHeight / 2;\n      const distanceFromCenter = Math.abs(elementCenter - containerHeight / 2);\n      const maxDistance = containerHeight / 2;\n      if (distanceFromCenter < maxDistance) {\n        // Elemento en el centro\n        habitacion.classList.add(\"centrado\");\n        habitacion.classList.remove(\"outside\");\n      } else {\n        // Elementos fuera del centro\n        habitacion.classList.add(\"outside\");\n        habitacion.classList.remove(\"centrado\");\n      }\n    });\n  }\n  const verArmarios = habitacionId => {\n    setSelectedHabitacionId(habitacionId);\n    setModalAbiertoArmarios(true);\n    getArmarios(habitacionId);\n  };\n  const obtenerConfirmacion = nombre => {\n    setHabitacionAEliminar(nombre);\n    setModalAbierto(true);\n  };\n  const abrirModalHabitacion = () => {\n    setModalAbiertoHabitacion(true);\n  };\n  const cerrarModalHabitacion = () => {\n    setModalAbiertoHabitacion(false);\n  };\n  const slide = amount => {\n    const newSlideIndex = slideIndex + amount;\n    const maxSlideIndex = (habitacione.length - 1) * -100;\n    if (newSlideIndex > 0 || newSlideIndex < maxSlideIndex) {\n      return;\n    }\n    setSlideIndex(newSlideIndex);\n  };\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n  useEffect(() => {\n    getHabitaciones();\n    getArmarios();\n  }, []);\n\n  //*EXTRAER DATOS DE USUARIO\n  const extraerDatosDeUsuario = () => {\n    const datosRecuperar = JSON.parse(localStorage.getItem(\"datosUsuario\"));\n    if (datosRecuperar && datosRecuperar.token) {\n      return [datosRecuperar.token, datosRecuperar.userId];\n    } else {\n      navigate(\"/\");\n    }\n  };\n\n  //*OBTENER HABITACIONES PARA MOSTRAR EN LA LISTA\n  const getHabitaciones = async () => {\n    const [token, userId] = extraerDatosDeUsuario();\n    try {\n      const response = await axios.get(process.env.REACT_APP_API_URL + \"/api/habitaciones/\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // console.log(\"Todo correcto\", response.data);\n      setHabitaciones(response.data);\n      setIsLoadingHabitaciones(true);\n    } catch (error) {\n      console.log(\"Error al obtener habitaciones\", error.message);\n    }\n  };\n\n  //*ELIMINAR HABITACION\n  const eliminarHabitacion = nombre => {\n    const [token, userId] = extraerDatosDeUsuario();\n    axios.delete(process.env.REACT_APP_API_URL + `/api/habitaciones/borrar/${nombre}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        userId: userId\n      }\n    }).then(res => {\n      setHabitaciones(habitaciones.filter(h => h.nombre !== nombre));\n    }).catch(error => console.log(error));\n  };\n  //*OBTENER ARMARIOS\n  const getArmarios = async habitacionId => {\n    const [token, userId] = extraerDatosDeUsuario();\n    try {\n      const response = await axios.get(process.env.REACT_APP_API_URL + \"/api/armarios/\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        params: {\n          userId: userId,\n          habitacion: habitacionId\n        }\n      });\n      setArmarios(response.data);\n      setIsLoadingArmarios(false);\n    } catch (error) {\n      // console.log(\"Error al obtener armarios\", error.message);\n    }\n  };\n  //*AGRUPAR ARMARIOS POR HABITACION\n  const armariosGroupedByHabitacion = armarios.reduce((groups, armario) => {\n    const habitacionId = armario.habitacion;\n    const habitacion = habitaciones.find(h => h._id === habitacionId);\n    if (habitacion) {\n      const nombreHabitacion = habitacion._id;\n      if (groups[nombreHabitacion]) {\n        groups[nombreHabitacion].push(armario);\n      } else {\n        groups[nombreHabitacion] = [armario];\n      }\n    }\n    return groups;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"habitaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cabeceraHabitaciones\",\n      children: [habitaciones.length === 0 && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Agregar nivel 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"h1Habitaciones\",\n        children: habitaciones.nombre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"crear\",\n        className: \"Crear\",\n        onClick: abrirModalHabitacion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"textoEmergente\",\n        children: \"Crear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listaHabitaciones\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lista\",\n          children: habitaciones.map(habitacion => /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"habitacionConcreta\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              onClick: () => verArmarios(habitacion._id),\n              children: habitacion.nombre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"eliminarHabitacion\",\n              onClick: () => obtenerConfirmacion(habitacion.nombre)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)]\n          }, habitacion._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), modalAbierto && /*#__PURE__*/_jsxDEV(ConfirmacionModalHabitacion, {\n      modalAbierto: modalAbierto,\n      cerrarModal: () => setModalAbierto(false),\n      eliminarHabitacion: eliminarHabitacion,\n      nombreHabitacion: habitacionAEliminar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), modalAbiertoHabitacion && /*#__PURE__*/_jsxDEV(Addhab, {\n      modalAbiertoHabitacion: modalAbiertoHabitacion,\n      cerrarModalHabitacion: cerrarModalHabitacion,\n      getHabitaciones: getHabitaciones\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalAbiertoArmarios,\n      onRequestClose: () => setModalAbiertoArmarios(false),\n      className: \"modal\",\n      overlayClassName: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Armarios de la habitaci\\xF3n \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), isloadingarmarios ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cargando armarios...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this) : armariosGroupedByHabitacion[selectedHabitacionId] ? armariosGroupedByHabitacion[selectedHabitacionId].map(armario => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Nombre: \", armario.nombre]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this)\n      }, armario._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay armarios disponibles para esta habitaci\\xF3n.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(Habitaciones, \"EVO75Ew4u9sxIRqNF/kFfNp1BIE=\", false, function () {\n  return [useNavigate, useForm];\n});\n_c = Habitaciones;\nexport default Habitaciones;\nvar _c;\n$RefreshReg$(_c, \"Habitaciones\");","map":{"version":3,"names":["axios","React","useState","useEffect","useRef","useNavigate","useForm","ConfirmacionModalHabitacion","Addhab","Modal","jsxDEV","_jsxDEV","Habitaciones","_ref","_s","darkmode","habitaciones","setHabitaciones","armarios","setArmarios","isloadingarmarios","setIsLoadingArmarios","isloadingHabitaciones","setIsLoadingHabitaciones","navigate","slideIndex","setSlideIndex","modalAbierto","setModalAbierto","habitacionAEliminar","setHabitacionAEliminar","modalAbiertoHabitacion","setModalAbiertoHabitacion","modalAbiertoArmarios","setModalAbiertoArmarios","selectedHabitacionId","setSelectedHabitacionId","listaHabitaciones","document","querySelector","habitacione","querySelectorAll","addEventListener","resaltarElementoCentrado","scrollPos","scrollTop","containerHeight","offsetHeight","forEach","habitacion","rect","getBoundingClientRect","elementTop","top","elementHeight","height","elementCenter","distanceFromCenter","Math","abs","maxDistance","classList","add","remove","verArmarios","habitacionId","getArmarios","obtenerConfirmacion","nombre","abrirModalHabitacion","cerrarModalHabitacion","slide","amount","newSlideIndex","maxSlideIndex","length","register","handleSubmit","formState","errors","getHabitaciones","extraerDatosDeUsuario","datosRecuperar","JSON","parse","localStorage","getItem","token","userId","response","get","process","env","REACT_APP_API_URL","headers","Authorization","data","error","console","log","message","eliminarHabitacion","delete","then","res","filter","h","catch","params","armariosGroupedByHabitacion","reduce","groups","armario","find","_id","nombreHabitacion","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","map","cerrarModal","isOpen","onRequestClose","overlayClassName","_c","$RefreshReg$"],"sources":["C:/Users/gabri/Documents/ProyectoFinal/FrontEndDondeEsta/frontend/src/components/Habitaciones.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ConfirmacionModalHabitacion from \"./ConfirmacionModalHabitacion\";\r\nimport Addhab from \"./Addhab\";\r\nimport Modal from \"react-modal\";\r\nimport \"./Habitaciones.css\";\r\n\r\nconst Habitaciones = ({ darkmode }) => {\r\n  const [habitaciones, setHabitaciones] = useState([]);\r\n  const [armarios, setArmarios] = useState([]);\r\n  const [isloadingarmarios, setIsLoadingArmarios] = useState(true);\r\n  const [isloadingHabitaciones, setIsLoadingHabitaciones] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [slideIndex, setSlideIndex] = useState(0);\r\n  const [modalAbierto, setModalAbierto] = useState(false);\r\n  const [habitacionAEliminar, setHabitacionAEliminar] = useState(\"\");\r\n  const [modalAbiertoHabitacion, setModalAbiertoHabitacion] = useState(false);\r\n  const [modalAbiertoArmarios, setModalAbiertoArmarios] = useState(false);\r\n  const [selectedHabitacionId, setSelectedHabitacionId] = useState(\"\");\r\n  const listaHabitaciones = document.querySelector(\".listaHabitaciones\");\r\n  const habitacione = document.querySelectorAll(\".habitacionConcreta\");\r\n\r\n  if (isloadingHabitaciones) {\r\n    listaHabitaciones.addEventListener(\"scroll\", resaltarElementoCentrado);\r\n  }\r\n\r\n  function resaltarElementoCentrado() {\r\n    const scrollPos = listaHabitaciones.scrollTop;\r\n    const containerHeight = listaHabitaciones.offsetHeight;\r\n\r\n    habitacione.forEach((habitacion) => {\r\n      const rect = habitacion.getBoundingClientRect();\r\n      const elementTop = rect.top;\r\n      const elementHeight = rect.height;\r\n      const elementCenter = elementTop + elementHeight / 2;\r\n      const distanceFromCenter = Math.abs(elementCenter - containerHeight / 2);\r\n      const maxDistance = containerHeight / 2;\r\n\r\n      if (distanceFromCenter < maxDistance) {\r\n        // Elemento en el centro\r\n        habitacion.classList.add(\"centrado\");\r\n        habitacion.classList.remove(\"outside\");\r\n      } else {\r\n        // Elementos fuera del centro\r\n        habitacion.classList.add(\"outside\");\r\n        habitacion.classList.remove(\"centrado\");\r\n      }\r\n    });\r\n  }\r\n  const verArmarios = (habitacionId) => {\r\n    setSelectedHabitacionId(habitacionId);\r\n    setModalAbiertoArmarios(true);\r\n    getArmarios(habitacionId);\r\n  };\r\n\r\n  const obtenerConfirmacion = (nombre) => {\r\n    setHabitacionAEliminar(nombre);\r\n    setModalAbierto(true);\r\n  };\r\n\r\n  const abrirModalHabitacion = () => {\r\n    setModalAbiertoHabitacion(true);\r\n  };\r\n  const cerrarModalHabitacion = () => {\r\n    setModalAbiertoHabitacion(false);\r\n  };\r\n  const slide = (amount) => {\r\n    const newSlideIndex = slideIndex + amount;\r\n    const maxSlideIndex = (habitacione.length - 1) * -100;\r\n\r\n    if (newSlideIndex > 0 || newSlideIndex < maxSlideIndex) {\r\n      return;\r\n    }\r\n\r\n    setSlideIndex(newSlideIndex);\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  useEffect(() => {\r\n    getHabitaciones();\r\n    getArmarios();\r\n  }, []);\r\n\r\n  //*EXTRAER DATOS DE USUARIO\r\n  const extraerDatosDeUsuario = () => {\r\n    const datosRecuperar = JSON.parse(localStorage.getItem(\"datosUsuario\"));\r\n    if (datosRecuperar && datosRecuperar.token) {\r\n      return [datosRecuperar.token, datosRecuperar.userId];\r\n    } else {\r\n      navigate(\"/\");\r\n    }\r\n  };\r\n\r\n  //*OBTENER HABITACIONES PARA MOSTRAR EN LA LISTA\r\n  const getHabitaciones = async () => {\r\n    const [token, userId] = extraerDatosDeUsuario();\r\n    try {\r\n      const response = await axios.get(\r\n        process.env.REACT_APP_API_URL + \"/api/habitaciones/\",\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      // console.log(\"Todo correcto\", response.data);\r\n      setHabitaciones(response.data);\r\n      setIsLoadingHabitaciones(true);\r\n    } catch (error) {\r\n      console.log(\"Error al obtener habitaciones\", error.message);\r\n    }\r\n  };\r\n\r\n  //*ELIMINAR HABITACION\r\n  const eliminarHabitacion = (nombre) => {\r\n    const [token, userId] = extraerDatosDeUsuario();\r\n    axios\r\n      .delete(\r\n        process.env.REACT_APP_API_URL + `/api/habitaciones/borrar/${nombre}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          data: {\r\n            userId: userId,\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        setHabitaciones(habitaciones.filter((h) => h.nombre !== nombre));\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  //*OBTENER ARMARIOS\r\n  const getArmarios = async (habitacionId) => {\r\n    const [token, userId] = extraerDatosDeUsuario();\r\n    try {\r\n      const response = await axios.get(\r\n        process.env.REACT_APP_API_URL + \"/api/armarios/\",\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          params: {\r\n            userId: userId,\r\n            habitacion: habitacionId,\r\n          },\r\n        }\r\n      );\r\n      setArmarios(response.data);\r\n      setIsLoadingArmarios(false);\r\n    } catch (error) {\r\n      // console.log(\"Error al obtener armarios\", error.message);\r\n    }\r\n  };\r\n  //*AGRUPAR ARMARIOS POR HABITACION\r\n  const armariosGroupedByHabitacion = armarios.reduce((groups, armario) => {\r\n    const habitacionId = armario.habitacion;\r\n    const habitacion = habitaciones.find((h) => h._id === habitacionId);\r\n\r\n    if (habitacion) {\r\n      const nombreHabitacion = habitacion._id;\r\n\r\n      if (groups[nombreHabitacion]) {\r\n        groups[nombreHabitacion].push(armario);\r\n      } else {\r\n        groups[nombreHabitacion] = [armario];\r\n      }\r\n    }\r\n\r\n    return groups;\r\n  }, {});\r\n\r\n  return (\r\n    <div className=\"habitaciones\">\r\n      <div className=\"cabeceraHabitaciones\">\r\n        {habitaciones.length === 0 && <h1>Agregar nivel 2</h1>}\r\n        <h1 className=\"h1Habitaciones\">{habitaciones.nombre}</h1>\r\n        <button\r\n          id=\"crear\"\r\n          className=\"Crear\"\r\n          onClick={abrirModalHabitacion}></button>\r\n        <div id=\"textoEmergente\">Crear</div>\r\n      </div>\r\n\r\n      <div>\r\n        <div className=\"listaHabitaciones\">\r\n          <div className=\"lista\">\r\n            {habitaciones.map((habitacion) => (\r\n              <ul className=\"habitacionConcreta\" key={habitacion._id}>\r\n                <h2 onClick={() => verArmarios(habitacion._id)}>\r\n                  {habitacion.nombre}\r\n                </h2>\r\n                <br />\r\n                <button\r\n                  className=\"eliminarHabitacion\"\r\n                  onClick={() =>\r\n                    obtenerConfirmacion(habitacion.nombre)\r\n                  }></button>\r\n              </ul>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {modalAbierto && (\r\n        <ConfirmacionModalHabitacion\r\n          modalAbierto={modalAbierto}\r\n          cerrarModal={() => setModalAbierto(false)}\r\n          eliminarHabitacion={eliminarHabitacion}\r\n          nombreHabitacion={habitacionAEliminar}\r\n        />\r\n      )}\r\n\r\n      {modalAbiertoHabitacion && (\r\n        <Addhab\r\n          modalAbiertoHabitacion={modalAbiertoHabitacion}\r\n          cerrarModalHabitacion={cerrarModalHabitacion}\r\n          getHabitaciones={getHabitaciones}\r\n        />\r\n      )}\r\n      <Modal\r\n        isOpen={modalAbiertoArmarios}\r\n        onRequestClose={() => setModalAbiertoArmarios(false)}\r\n        className=\"modal\"\r\n        overlayClassName=\"overlay\">\r\n        <h2>Armarios de la habitación </h2>\r\n        {isloadingarmarios ? (\r\n          <p>Cargando armarios...</p>\r\n        ) : armariosGroupedByHabitacion[selectedHabitacionId] ? (\r\n          armariosGroupedByHabitacion[selectedHabitacionId].map((armario) => (\r\n            <div key={armario._id}>\r\n              <p>Nombre: {armario.nombre}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No hay armarios disponibles para esta habitación.</p>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Habitaciones;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}